{"name":"RailsPresenter","tagline":"The presentation layer you always wanted for your Rails applications","body":"# RailsPresenter\r\n\r\n[![Gem Version](https://badge.fury.io/rb/rails_presenter.png)](http://badge.fury.io/rb/rails_presenter)\r\n[![Build Status](https://travis-ci.org/dfmonaco/rails_presenter.png?branch=master)](https://travis-ci.org/dfmonaco/rails_presenter)\r\n[![Coverage Status](https://coveralls.io/repos/dfmonaco/rails_presenter/badge.png?branch=master)](https://coveralls.io/r/dfmonaco/rails_presenter)\r\n\r\nRailsPresenter will help you to clean up your views and avoid helpers hell.\r\n\r\n##Before:\r\n\r\n```haml\r\n# app/views/purchase_orders/show.html.haml\r\n\r\n%h1 Purchase Order\r\n%div\r\n  %p\r\n    %strong Date:\r\n    %span= localize(@purchase_order.date, format: :long)\r\n  %p\r\n    %strong Number:\r\n    %span= @purchase_order.number\r\n\r\n%h2 Customer\r\n%div\r\n  %p\r\n    %strong Name:\r\n    %span= @purchase_order.customer.name\r\n  %p\r\n    %strong Phone:\r\n    %span= @purchase_order.customer.phone || '------'\r\n  %p\r\n    %strong Email:\r\n    %span= mail_to(@purchase_order.customer.email)\r\n\r\n  %table\r\n    %thead\r\n      %tr\r\n        %th N°\r\n        %th Quantity\r\n        %th Item\r\n        %th Unit Price\r\n        %th Discount\r\n        %th Amount\r\n\r\n    %tbody\r\n      - @purchase_order.items.includes(:product).each_with_index do |item, index|\r\n        %tr\r\n          %td= index + 1\r\n          %td= number_with_precision(item.quantity)\r\n          %td= item.product.name\r\n          %td= number_to_currency(item.unit_price)\r\n          %td= number_to_percentage(item.discount)\r\n          %td= number_to_currency(item.amount)\r\n\r\n%div\r\n  %p\r\n    %strong Subtotal:\r\n    %span= number_to_currency(@purchase_order.subtotal)\r\n  %p\r\n    %strong Vat:\r\n    %span= number_to_currency(@purchase_order.vat)\r\n  %p\r\n    %strong Total:\r\n    %span= number_to_currency(@purchase_order.total)\r\n\r\n```\r\n\r\n##After:\r\n\r\n```haml\r\n# app/views/purchase_orders/show.html.haml\r\n\r\n- present(@purchase_order) do |order_presenter|\r\n\r\n  %h1 Purchase Order\r\n  = order_presenter.with_attrs :date, :number\r\n\r\n  %h2 Customer\r\n  = order_presenter.customer.with_attrs :name, :phone, :email\r\n\r\n  %table\r\n    %thead\r\n      %tr\r\n        %th N°\r\n        %th Quantity\r\n        %th Item\r\n        %th Unit Price\r\n        %th Discount\r\n        %th Amount\r\n\r\n    %tbody\r\n      - order_presenter.items.each_with_index do |item_presenter, index|\r\n        %tr\r\n          %td= index + 1\r\n          %td= item_presenter.quantity\r\n          %td= item_presenter.product\r\n          %td= item_presenter.unit_price\r\n          %td= item_presenter.discount\r\n          %td= item_presenter.amount\r\n\r\n  = order_presenter.with_attrs :subtotal, :vat, :total\r\n```\r\n\r\n## How did we get here?\r\n\r\n```ruby\r\n# app/presenters/purchase_order_presenter.rb\r\n\r\nclass PurchaseOrderPresenter < RailsPresenter::Base\r\n  present :customer\r\n\r\n  present :items do\r\n    includes(:product)\r\n  end\r\n\r\n  format :subtotal, :vat, :total, with: :number_to_currency\r\n\r\n  def date\r\n    h.localize(super, format: :long)\r\n  end\r\nend\r\n```\r\n\r\n```ruby\r\n# app/presenters/customer_presenter.rb\r\n\r\nclass CustomerPresenter < RailsPresenter::Base\r\n  def email\r\n    h.mail_to super\r\n  end\r\nend\r\n```\r\n\r\n```ruby\r\n# app/presenters/item_presenter.rb\r\n\r\nclass ItemPresenter < RailsPresenter::Base\r\n  present :product\r\n\r\n  format :quantity, with: :number_with_precision\r\n  format :unit_price, :amount, with: :number_to_currency\r\n  format :discount, with: :number_to_percentage\r\nend\r\n```\r\n\r\n```ruby\r\n# app/presenters/product_presenter.rb\r\n\r\nclass ProductPresenter < RailsPresenter::Base\r\nend\r\n```\r\n\r\n## How does it work?\r\nBasically there are two main components, the `presenter object` and the `#present` helper method.\r\n\r\n### The presenter object\r\nYou can think of a presenter as a mix between a domain model object and a view template, every method call not defined in the current class will be forwarded to the original domain model object, besides you can access all the view template functionality through the `#h` method. Also the `#target` method will get you the unmodified original domain model object.\r\n\r\n```ruby\r\nclass ProductPresenter < RailsPresenter::Base\r\n\r\n  def image\r\n    h.link_to(h.image_tag(super), h.product_path(target))\r\n  end\r\n\r\nend\r\n```\r\n\r\n### The #present helper method\r\nThe helper method `#present` it's used to instantiate new presenter objects, it takes any object, an array of objects or an ActiveRecord::Relation and returns the corresponding presenter instances.\r\n\r\n```ruby\r\npresent(Customer.new).map(&:class) # => CustomerPresenter\r\npresent([Customer.new, Product.new]).map(&:class) # => [CustomerPresenter, ProductPresenter]\r\npresent(Product.limit(2).order(:name))).map(&:class) # => [ProductPresenter, ProductPresenter]\r\n```\r\nThis method determines the name of the presenter class from the target object, for example a Project object would instantiate a ProjectPresenter object. If the assumed presenter class doesn't exist it will return the unmodified target object.\r\n\r\nYou can pass an optional block too:\r\n\r\n```ruby\r\npresent(@purchase_order) do |purchase_order_presenter|\r\n  purchase_order_presenter.date\r\n  purchase_order_presenter.number\r\nend\r\n```\r\n\r\n## Features\r\n### Present associations\r\n\r\nDefine the associated objects that you want to get automatically presented.\r\n\r\n```ruby\r\nclass Post\r\n  has_many :comments\r\n  belongs_to :user\r\nend\r\n\r\nclass PostPresenter < RailsPresenter::Base\r\n  present :comments, :user\r\nend\r\n\r\npost_presenter = present(Post.last)\r\n\r\npost_presenter.comments.first.class # => CommentPresenter\r\npost_presenter.user.class # => UserPresenter\r\n```\r\n\r\n### Format attributes with rails helpers\r\n\r\nConfigure in your presenter class how you want your attributes to be formatted for display.\r\n\r\n```ruby\r\nclass InvoicePresenter < RailsPresenter::Base\r\n  format :net_amount, :total_amount, with: :number_to_currency\r\n  format :vat_percentage, with: :number_to_percentage\r\nend\r\n\r\ninvoice_presenter = present(Invoice.last)\r\n\r\ninvoice_presenter.net_amount # => $234,56\r\ninvoice_presenter.vat_percentage # => 10,5%\r\n```\r\n\r\n### Nil Formatter\r\n\r\nRailsPresenter will format any attribute with a nil value with a more descriptive string. (In future versions this string will be configurable)\r\n\r\n```ruby\r\npurchase_order.description # => nil\r\n\r\npresent(purchase_order).description # => '----'\r\n```\r\n\r\n### Show your object attributes in a consistent and DRY way\r\n\r\nUse the default partial to show your object's attributes or write your own.\r\n\r\n```ruby\r\nuser_presenter.with_attrs :first_name, :last_name, :email\r\n```\r\n\r\nThis helper will render the following partial passing it a hash named `attrs_hash` that represents the names and values for the given attributes.\r\n\r\n```erb\r\n# shared/_show_with_attrs.html.erb\r\n\r\n<div class=\"show-with-attrs\">\r\n  <% attrs_hash.each do |name, value| %>\r\n    <p>\r\n      <strong><%= \"#{name.to_s.titleize}: \" %></strong>\r\n      <span><%= value %></span>\r\n    </p>\r\n  <% end %>\r\n</div>\r\n```\r\n\r\nIf you define your own partial with the same name inside the views/shared directory it will override the provided default.\r\n\r\n### Teach your objects how to represent themselves\r\n\r\nTo take advantage of Rails calling `#to_s` before rendering an object inside a view template, RailsPresenter redefines this method to call a `#name` method if it is defined. (In future versions this will be configurable and you will be able to define an array of methods to try before using default `#to_s` behavior)\r\nSo if you have the right method defined, you can just drop your object in a view template and without calling any method it will represent itself.\r\n\r\n```haml\r\n# contacts/show.html.haml\r\n\r\n= @contact # => \"#<Contact:0xc1ad978>\"\r\n\r\n= @contact.name # => 'John Doe'\r\n\r\n= present(@contact) # => 'John Doe'\r\n```\r\n\r\n### Automagic links\r\n\r\nSet the location of your resources once and get free links everywhere.\r\n\r\n```ruby\r\nclass CommentPresenter\r\n  location :@post, :@comment\r\nend\r\n\r\ncomment_presenter.link_to_self # => \"<a href=\"/posts/32/comments/21\">Comment Name</a>\"\r\n```\r\n\r\nYou can use it with namespaced resources or has_one relationships\r\n\r\n```ruby\r\nclass ProfilePresenter\r\n  location :dashboard, :@user, :profile\r\n\r\n  def name\r\n    \"#{user.name}'s Profile\"\r\n  end\r\nend\r\n\r\nprofile_presenter.link_to_self\r\n\r\n# => \"<a href=\"dashboard/users/12/profile\">John Doe's Profile</a>\"\r\n```\r\n\r\nBy default RailsPresenter will call `#to_s` to get the text to be used inside the anchor, but you can pass a custom value too:\r\n\r\n```ruby\r\nprofile_presenter.link_to_self text: 'View your Profile'\r\n\r\n# => \"<a href=\"dashboard/users/12/profile\">View your Profile</a>\"\r\n```\r\n\r\nTo get the parent resources RailsPresenter will try to get an instance variable with the same name as the parent, and if can't find any it will try to get it from an accessor method in the target object. In the example above it would try first to get a `@user` instance variable and if can't find it, it will call `profile_presenter.target.user`.\r\n\r\n## Are you crazy? We already have Draper!!\r\n\r\nWell yes, Draper it's an amazing library and it inspired RailsPresenter in many ways (and was developed by people way more smarter than me), so I will try to illustrate what motivated me to reinvent the wheel.\r\n\r\nAt a basic level both provide the same functionality, but for my personal needs I find Draper too complex and with too many options, I prefer a simpler interface and good conventions, besides RailsPresenter implements a set of presentation related functionality on top of basic delegation as you can see on the aforementioned features. Additionally RailsPresenter it's meant to be used only inside the views, through the `#present` helper, so it doesn't provides any controller related functionality.\r\n\r\nOn the other side Draper has a much more fine-grained control over the methods delegated to the target object, RailsPresenter just will delegate every method called not defined in the presenter.\r\n\r\n### Examples:\r\n\r\n#### Decorating a single object\r\n\r\n```ruby\r\n# Draper way\r\n\r\nArticle.first.decorate\r\nArticleDecorator.new(Article.first)\r\nArticleDecorator.decorate(Article.first)\r\n\r\n# RailsPresenter way\r\n\r\npresent(Article.first)\r\n```\r\n#### Decorating a collection\r\n\r\n```ruby\r\n# Draper way\r\n\r\nArticleDecorator.decorate_collection(Article.all)\r\nArticle.popular.decorate # this only works for an ActiveRecord relation\r\n[Article.first, Comment.last, User.find(3)].decorate # you can't do this\r\n\r\n# RailsPresenter way\r\n\r\npresent(Article.all)\r\npresent(Article.popular)\r\npresent([Article.first, Comment.last, User.find(3)]) # you can decorate arbitrary arrays\r\n```\r\n#### Decorating associations\r\n\r\n```ruby\r\n# Draper way\r\n\r\nclass Article < ActiveRecord::Base\r\n  # I think the following scope it's completely view related and doesn't belongs here\r\n  def self.comments_with_author_included_and_ordered_by_created_at\r\n    comments.includes(:author).order('comments.created_at')\r\n  end\r\nend\r\n\r\nclass ArticleDecorator < Draper::Decorator\r\n  decorates_association :comments, scope: :comments_with_author_included_and_ordered_by_created_at\r\nend\r\n\r\n# RailsPresenter way\r\n\r\nclass ArticlePresenter < RailsPresenter::Base\r\n  present :comments do\r\n    includes(:author).order('comments.created_at')\r\n  end\r\nend\r\n```\r\n\r\n\r\n## Compatibility\r\n\r\nFor any given version, check `.travis.yml` to see what Ruby versions are being tested for compatibility.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'rails_presenter'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install rails_presenter\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## License\r\n\r\n__MIT License__. *Copyright 2013 Diego Mónaco*\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}