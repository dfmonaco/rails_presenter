{
  "name": "RailsPresenter",
  "tagline": "The presentation layer you always wanted for your Rails applications",
  "body": "# RailsPresenter\r\n\r\nRailsPresenter will help you to clean up your views and avoid helpers hell.\r\n\r\n## How does it work?\r\nBasically there are two main components, the `presenter object` and the `#present` helper method.\r\n\r\n### The presenter object\r\nYou can think of a presenter as a mix between a domain model object and a view template, every method call not defined in the current class will be forwarded to the original domain model object, besides you can access all the view template functionality through the `#h` method. Also the `#target` (also aliased as `#object`) method will get you the unmodified original domain model object.\r\n\r\n```ruby\r\nclass ProductPresenter < RailsPresenter::Base\r\n\r\n  def image\r\n    h.link_to(h.image_tag(super), h.product_path(target))\r\n  end\r\n\r\nend\r\n```\r\n\r\n### The #present helper method\r\nThe helper method `#present` it's used to instantiate new presenter objects, it takes any object, an array of objects or an ActiveRecord::Relation and returns the corresponding presenter instances.\r\n\r\n```ruby\r\npresent(Customer.new).map(&:class) # => CustomerPresenter\r\npresent([Customer.new, Product.new]).map(&:class) # => [CustomerPresenter, ProductPresenter]\r\npresent(Product.limit(2).order(:name))).map(&:class) # => [ProductPresenter, ProductPresenter]\r\n```\r\nThis method determines the name of the presenter class from the target object, for example a Project object would instantiate a ProjectPresenter object. If the assumed presenter class doesn't exist it will return the unmodified target object.\r\n\r\nYou can pass an optional block too, in fact this the intended usage of the helper in your views:\r\n\r\n```ruby\r\npresent(@purchase_order) do |purchase_order_presenter|\r\n  purchase_order_presenter.date\r\n  purchase_order_presenter.number\r\nend\r\n```\r\n\r\n## Features\r\n### Present associations\r\n\r\nDefine the associated objects that you want to get automatically presented.\r\n\r\n```ruby\r\nclass Post\r\n  has_many :comments\r\n  belongs_to :user\r\nend\r\n\r\nclass PostPresenter < RailsPresenter::Base\r\n  present :comments, :user\r\nend\r\n\r\npost_presenter = present(Post.last)\r\n\r\npost_presenter.comments.first.class # => CommentPresenter\r\npost_presenter.user.class # => UserPresenter\r\n```\r\n### Use `super` at will\r\n\r\nYou can very easily add functionality on top of what RailsPresenter already provides, you just have to redefine your method and call `super`, class inheritance, module mixin, everything works as expected, as RailsPresenter uses a set of well identified (not anonymous) modules to extend functionality.\r\n\r\n```ruby\r\nclass SupplierPresenter < CompanyPresenter; end\r\nclass CompanyPresenter < RailsPresenter::Base; end\r\n\r\nSupplierPresenter.ancestors\r\n\r\n# =>\r\n\r\n#      [SupplierPresenter,\r\n#       SupplierPresenter::NumberToCurrency,\r\n#       SupplierPresenter::SupplierPresenterAssociations,\r\n#       SupplierPresenter::BlankAttributes,\r\n#       CompanyPresenter,\r\n#       CompanyPresenter::BlankAttributes,\r\n#       RailsPresenter::Base,\r\n#       etc, etc...]\r\n```\r\n\r\n## Are you crazy? We already have Draper!!\r\n\r\nWell yes, Draper it's an amazing library and it inspired RailsPresenter in many ways (and was developed by people way more smarter than me), so I will try to illustrate what motivated me to reinvent the wheel.\r\n\r\nAt a basic level both provide the same functionality, but for my personal needs I find Draper too complex and with too many options, I prefer a simpler interface and good conventions, besides RailsPresenter implements a set of presentation related functionality on top of basic delegation as you can see on the aforementioned features. Additionally RailsPresenter it's meant to be used only inside the views, through the `#present` helper, so it doesn't provides any controller related functionality.\r\n\r\nOn the other side Draper has a much more fine-grained control over the methods delegated to the target object, RailsPresenter just will delegate every method called not defined in the presenter.\r\n\r\n### Examples:\r\n\r\n#### Decorating a single object\r\n\r\n```ruby\r\n# Draper way\r\n\r\nArticle.first.decorate\r\nArticleDecorator.new(Article.first)\r\nArticleDecorator.decorate(Article.first)\r\n\r\n# RailsPresenter way\r\n\r\npresent(Article.first)\r\n```\r\n#### Decorating a collection\r\n\r\n```ruby\r\n# Draper way\r\n\r\nArticleDecorator.decorate_collection(Article.all)\r\nArticle.popular.decorate # this only works for an ActiveRecord relation\r\n[Article.first, Comment.last, User.find(3)].decorate # you can't do this\r\n\r\n# RailsPresenter way\r\n\r\npresent(Article.all)\r\npresent(Article.popular)\r\npresent([Article.first, Comment.last, User.find(3)]) # you can decorate arbitrary arrays\r\n```\r\n#### Decorating associations\r\n\r\n```ruby\r\n# Draper way\r\n\r\nclass Article < ActiveRecord::Base\r\n  # I think the following scope it's completely view related and doesn't belongs here\r\n  def self.comments_with_author_included_and_ordered_by_created_at\r\n    comments.includes(:author).order('comments.created_at')\r\n  end\r\nend\r\n\r\nclass ArticleDecorator < Draper::Decorator\r\n  decorates_association :comments, scope: :comments_with_author_included_and_ordered_by_created_at\r\nend\r\n\r\n# RailsPresenter way\r\n\r\nclass ArticlePresenter < RailsPresenter::Base\r\n  present :comments do\r\n    includes(:author).order('comments.created_at')\r\n  end\r\nend\r\n```\r\n\r\n## Inspiration\r\n\r\n* Railscast: http://railscasts.com/episodes/287-presenters-from-scratch\r\n* Book: http://pragprog.com/book/warv/the-rails-view\r\n* Gem: https://github.com/drapergem/draper\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'rails_presenter'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install rails_presenter\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## License\r\n\r\n__MIT License__. *Copyright 2013 Diego MÃ³naco*\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "google": "UA-36994365-2",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}